// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: query.sql

package pgstore

import (
	"context"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const getAddress = `-- name: GetAddress :one
SELECT "ad_addressid",
       "ad_street",
       "ad_city",
       "ad_state",
       "ad_zip",
       "ad_country"
FROM address
WHERE "ad_addressid" = $1
`

func (q *Queries) GetAddress(ctx context.Context, adAddressid uuid.UUID) (Address, error) {
	row := q.db.QueryRow(ctx, getAddress, adAddressid)
	var i Address
	err := row.Scan(
		&i.AdAddressid,
		&i.AdStreet,
		&i.AdCity,
		&i.AdState,
		&i.AdZip,
		&i.AdCountry,
	)
	return i, err
}

const getOrder = `-- name: GetOrder :one
SELECT "or_orderid",
       "or_userid",
       "or_totalamount",
       "or_orderstatus",
       "or_paymentmethod",
       "or_shippingaddress",
       "or_createdat",
       "or_updatedat"
FROM orders
WHERE "or_orderid" = $1
`

func (q *Queries) GetOrder(ctx context.Context, orOrderid uuid.UUID) (Order, error) {
	row := q.db.QueryRow(ctx, getOrder, orOrderid)
	var i Order
	err := row.Scan(
		&i.OrOrderid,
		&i.OrUserid,
		&i.OrTotalamount,
		&i.OrOrderstatus,
		&i.OrPaymentmethod,
		&i.OrShippingaddress,
		&i.OrCreatedat,
		&i.OrUpdatedat,
	)
	return i, err
}

const getOrderProducts = `-- name: GetOrderProducts :many
SELECT "orp_orderid",
       "orp_productid",
       "orp_quantidad",
       "orp_totalprice"
FROM orders_products
WHERE "orp_orderid" = $1
`

func (q *Queries) GetOrderProducts(ctx context.Context, orpOrderid pgtype.UUID) ([]OrdersProduct, error) {
	rows, err := q.db.Query(ctx, getOrderProducts, orpOrderid)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []OrdersProduct
	for rows.Next() {
		var i OrdersProduct
		if err := rows.Scan(
			&i.OrpOrderid,
			&i.OrpProductid,
			&i.OrpQuantidad,
			&i.OrpTotalprice,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getProducts = `-- name: GetProducts :one
SELECT "pr_productid",
       "pr_description",
       "pr_stock",
       "pr_price",
       "pr_vbactive"
FROM products
WHERE "pr_productid" = $1
`

func (q *Queries) GetProducts(ctx context.Context, prProductid uuid.UUID) (Product, error) {
	row := q.db.QueryRow(ctx, getProducts, prProductid)
	var i Product
	err := row.Scan(
		&i.PrProductid,
		&i.PrDescription,
		&i.PrStock,
		&i.PrPrice,
		&i.PrVbactive,
	)
	return i, err
}

const getUsers = `-- name: GetUsers :one
SELECT "us_userid",
       "us_firstname",
       "us_lastname",
       "us_email",
       "us_vbactive"
FROM users
WHERE "us_userid" = $1
`

func (q *Queries) GetUsers(ctx context.Context, usUserid uuid.UUID) (User, error) {
	row := q.db.QueryRow(ctx, getUsers, usUserid)
	var i User
	err := row.Scan(
		&i.UsUserid,
		&i.UsFirstname,
		&i.UsLastname,
		&i.UsEmail,
		&i.UsVbactive,
	)
	return i, err
}

const insertAddress = `-- name: InsertAddress :one
INSERT INTO address (
    "ad_street",
    "ad_city",
    "ad_state",
    "ad_zip",
    "ad_country"
)
VALUES ($1, $2, $3, $4, $5)
RETURNING "ad_addressid"
`

type InsertAddressParams struct {
	AdStreet  string
	AdCity    string
	AdState   string
	AdZip     string
	AdCountry string
}

func (q *Queries) InsertAddress(ctx context.Context, arg InsertAddressParams) (uuid.UUID, error) {
	row := q.db.QueryRow(ctx, insertAddress,
		arg.AdStreet,
		arg.AdCity,
		arg.AdState,
		arg.AdZip,
		arg.AdCountry,
	)
	var ad_addressid uuid.UUID
	err := row.Scan(&ad_addressid)
	return ad_addressid, err
}

const insertOrder = `-- name: InsertOrder :one
INSERT INTO orders (
    "or_userid",
    "or_totalamount",
    "or_orderstatus",
    "or_paymentmethod",
    "or_shippingaddress",
    "or_createdat"
)
VALUES ($1, $2, $3, $4, $5, $6)
RETURNING "or_orderid"
`

type InsertOrderParams struct {
	OrUserid          string
	OrTotalamount     float64
	OrOrderstatus     string
	OrPaymentmethod   string
	OrShippingaddress string
	OrCreatedat       pgtype.Timestamp
}

func (q *Queries) InsertOrder(ctx context.Context, arg InsertOrderParams) (uuid.UUID, error) {
	row := q.db.QueryRow(ctx, insertOrder,
		arg.OrUserid,
		arg.OrTotalamount,
		arg.OrOrderstatus,
		arg.OrPaymentmethod,
		arg.OrShippingaddress,
		arg.OrCreatedat,
	)
	var or_orderid uuid.UUID
	err := row.Scan(&or_orderid)
	return or_orderid, err
}

const insertOrderProducts = `-- name: InsertOrderProducts :exec
INSERT INTO orders_products (
    "orp_orderid",
    "orp_productid",
    "orp_quantidad",
    "orp_totalprice"
)
VALUES ($1, $2, $3, $4)
`

type InsertOrderProductsParams struct {
	OrpOrderid    pgtype.UUID
	OrpProductid  string
	OrpQuantidad  int32
	OrpTotalprice float64
}

func (q *Queries) InsertOrderProducts(ctx context.Context, arg InsertOrderProductsParams) error {
	_, err := q.db.Exec(ctx, insertOrderProducts,
		arg.OrpOrderid,
		arg.OrpProductid,
		arg.OrpQuantidad,
		arg.OrpTotalprice,
	)
	return err
}

const insertProducts = `-- name: InsertProducts :one
INSERT INTO products (
    "pr_description",
    "pr_stock",
    "pr_price",
    "pr_vbactive"
)
VALUES ($1, $2, $3, $4)
RETURNING "pr_productid"
`

type InsertProductsParams struct {
	PrDescription string
	PrStock       int32
	PrPrice       float64
	PrVbactive    bool
}

func (q *Queries) InsertProducts(ctx context.Context, arg InsertProductsParams) (uuid.UUID, error) {
	row := q.db.QueryRow(ctx, insertProducts,
		arg.PrDescription,
		arg.PrStock,
		arg.PrPrice,
		arg.PrVbactive,
	)
	var pr_productid uuid.UUID
	err := row.Scan(&pr_productid)
	return pr_productid, err
}

const insertUsers = `-- name: InsertUsers :one
INSERT INTO users (
    "us_firstname",
    "us_lastname",
    "us_email",
    "us_vbactive"
)
VALUES ($1, $2, $3, $4)
RETURNING "us_userid"
`

type InsertUsersParams struct {
	UsFirstname string
	UsLastname  string
	UsEmail     string
	UsVbactive  bool
}

func (q *Queries) InsertUsers(ctx context.Context, arg InsertUsersParams) (uuid.UUID, error) {
	row := q.db.QueryRow(ctx, insertUsers,
		arg.UsFirstname,
		arg.UsLastname,
		arg.UsEmail,
		arg.UsVbactive,
	)
	var us_userid uuid.UUID
	err := row.Scan(&us_userid)
	return us_userid, err
}

const updateOrder = `-- name: UpdateOrder :exec
UPDATE orders
SET "or_orderstatus" = $1,
    "or_updatedat" = $2
WHERE or_orderid = $3
`

type UpdateOrderParams struct {
	OrOrderstatus string
	OrUpdatedat   pgtype.Timestamp
	OrOrderid     uuid.UUID
}

func (q *Queries) UpdateOrder(ctx context.Context, arg UpdateOrderParams) error {
	_, err := q.db.Exec(ctx, updateOrder, arg.OrOrderstatus, arg.OrUpdatedat, arg.OrOrderid)
	return err
}
